// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  password      String?
  role          Role            @default(USER)
  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]

  products Product[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationToken")
}

model Product {
  id              String       @id @default(cuid())
  name            String       @map("name_product")
  brand           String
  description     String
  category        CategoryEnum
  subcategory     String
  gender          Gender
  state           Float
  condition       Condition
  stockQuantity   Int          @default(1)
  size            String
  color           String?
  material        String?
  shippingInfo    String?
  views           Int          @default(0)
  itsOnSale       Boolean
  price           Float
  discountedPrice Float?
  referenceURL    String?
  sellerId        String
  seller          User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  returnPolicy    String?
  mainImage       String
  images          Image[]      @relation("ProductImages")
  imageAlt        String
  soldOut         Boolean      @default(false)
  tags            String[]
  createdAt       DateTime     @default(now())

  @@map("products")
}

model Image {
  id        String  @id @default(cuid())
  url       String
  productId String  @map("product_id")
  product   Product @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

enum ImageType {
  SMALL
  NORMAL
}

enum Condition {
  NEW
  PERFECT
  SEMI_NEW
  USED
}

enum CategoryEnum {
  ACCESORIES
  ROPA
  ZAPATILLAS
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
