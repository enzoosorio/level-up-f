// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  products      Product[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationToken")
}

model Product {
  id              String     @id @default(cuid())
  name            String     @map("name_product")
  brand           String     @map("small_name_product")
  description     String
  category        String?
  gender          Gender?
  state           String?
  condition       Condition?
  stockQuantity   String
  size            String
  color           String?
  material        String?
  shippingInfo    String?
  views           Int
  itsOnSale       Boolean
  price           Float
  discountedPrice Float
  referenceURL    String?
  sellerId        String
  seller          User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  returnPolicy    String?
  mainImage       String
  images          Image[]    @relation("ProductImages")
  createdAt       DateTime   @default(now())
  soldOut         Boolean
  imageAlt        String

  @@map("products")
}

model Image {
  id        String    @id @default(cuid())
  url       String
  altText   String?
  type      ImageType
  productId String    @map("product_id")
  product   Product   @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

enum ImageType {
  SMALL
  NORMAL
}

enum Condition {
  NEW
  PERFECT_STATE
  SEMI_NEW
  USED
}

enum Gender {
  MALE
  FEMALE
}
